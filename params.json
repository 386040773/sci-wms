{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Sci-wms","google":"","tagline":"Sci-wms: A Python WMS service for geospatial gridded data (Only unstructured FVCOM and ADCIRC grids logically rectangular grids supported)","body":"sci-wms\r\n=========\r\n\r\n####A Python WMS service for geospatial gridded data (Only unstructured FVCOM and ADCIRC grids and structured grids officially supported)\r\n\r\n![Global HYCOM as filled contours](https://raw.github.com/acrosby/sci-wms/master/src/pywms/wms/static/example1.png)\r\n\r\n##System Requirements\r\n\r\n- >= 4GB RAM But it depends directly on the size and extents of the datasets you will be visualizing.\r\n- > 2 CPU (> 4 CPU Better) \r\n- Python > Version 2.6\r\n\r\n##Roadmap\r\n\r\n####Version 1:\r\n- Bug free working implementation of the current dev code\r\n- working getcaps\r\n- working getmap\r\n- working getlegendgraphic for non-autoscaling colormap styles\r\n- service based dataset initialization and updating in addition to admin\r\n- support for native Adcirc and FVCOM model output meshes\r\n\r\n####Version 1.1:\r\n- Support for rectilinear and curvilinear grids\r\n- some wps functionality\r\n- projections other than web mercator\r\n- working getlegendgraphic response for the autoscaling colormap styles\r\n- server-wide symbolization customization in admin\r\n\r\n####Experimental Fork/Branch:\r\n- Leverage hardware/opengl rendering for high overhead styles (facets, arrows...)\r\n\r\n##Install\r\n\r\nDownload the compressed project and unpack anywhere. This is where the installation will live.\r\n\r\n####If you have the standard enthought python distribution (epd):\r\n\r\nInstall the remaining dependencies:\r\n\r\n    $easy_install gunicorn\r\n    $easy_install greenlet\r\n    $easy_install gevent              # or easy_install eventlet\r\n    $easy_install django\r\n\r\n####If are not using the enthought python distribution:\r\n\r\nYou must have the following python packages installed:\r\n\r\n- django\r\n- gunicorn\r\n- greenlet\r\n- gevent or eventlet\r\n- numpy\r\n- matplotlib (1.1.0 preferred)\r\n- matplotlib basemap (versions 1.0.1)\r\n- netCDF4 (Install from the netcdf4-python google code repository if using HDF a recent build of HDF5)\r\n- shapely\r\n- markdown\r\n\r\nsci-wms works with both pip and virtualenv quite happily. If you\r\nhave pip installed you can use the following to install many (but not all) of the required modules:\r\n\r\n    $pip install package\r\n\r\n<!---\r\nOr you can install the required packages (with the versions we develop\r\nthe wms on) with the requirements file:\r\n\r\n    $pip install -r requirements.txt\r\n-->\r\n\r\nSimilarly if you have setup_tools installed you can use:\r\n\r\n    $easy_install package\r\n\r\nIf you are using virtualenv, just make sure you have the environment\r\nactivated before you try to install the packages or point to the environment\r\nwith pip on the install command.\r\n\r\nYou also need to ensure that you have basemap matplotlib toolkit installed:\r\n\r\n    $wget -o basemap-1.0.1.tar.gz http://sourceforge.net/projects/matplotlib/files/matplotlib-toolkits/basemap-1.0.1/basemap-1.0.1.tar.gz/download\r\n    $pip install basemap-1.0.1.tar.gz\r\n\r\n##Run\r\n\r\n####To Start With Django Development Server (on port 7000 for example):\r\n\r\n    $cd project_folder/src/pywms\r\n\r\n    $python manage.py runserver 0.0.0.0:7000   # for local use \"localhost:7000\"\r\n\r\n####Run with Gunicorn Production WSGI Server:\r\n\r\n    $cd project_folder/src/pywms\r\n\r\n    $gunicorn_django -c config_public.py       # for local use config_local.py (configs use port 7000 by default)\r\n\r\nor\r\n\r\n    $cd project_folder\r\n    $./start_server.sh    # this starts the public server\r\n    $./stop_server.sh     # this stops the public server (actually ALL gunicorn_django processes)\r\n\r\nYou can edit the gunicorn config file (config_public.py and config_local.py) to specify the port and other\r\ngunicorn server settings.\r\n\r\nCan also be run with mod_wsgi/mod_python/etc in Apache. I prefer to proxypass\r\nin Apache or nginx to the gunicorn server because I think its better setup\r\nto handle the kinds of requests the server sees.\r\n\r\n##Setup\r\n\r\n###Change password for default user:\r\n\r\nThe default username is \" *sciwmsuser* \" and its password is \" *sciwmspassword* \". So,\r\nthe first thing you should do is login to the administration utility\r\nand change the password or remove the default user and create a new one\r\nfor yourself.\r\n\r\n*Caution* : Depending on the version of Django you have installed you may have a problem\r\nlogging into the admin site, even with the correct password. An easy way solve this problem is to\r\nsimply to run the following command to reset the sciwmsuser password from the command line.\r\n\r\n    $python manage.py changepassword sciwmsuser\r\n\r\nThe admin page can be found here:   http://server:port/admin\r\n\r\nThis admin site is how you will add and remove datasets for the wms server.\r\n\r\n###http://server:port/wmstest\r\n\r\nIn order for the wmstest page to work you need to add your site (and port) url to the sites list and remove all others. This is *important* because a request to the *wmstest* page (or the http://server:port/update page) will\r\ninitialize newly added datasets and update datasets that are specified as updateable in the system. If you have a lot of datasets in your server, it may take a while to initialize all of them.\r\nEnsure that there is a dataset_id.nc and dataset_id.domain file in the pywms folder for each of your unstructured datasets before allowing others to use your services. Initialization needs to only be done once\r\nper dataset, and subsequent updates (if required) are quick. Structured grid datasets will only have a dataset_id.nc file in the pywms folder, they do not require the .domain file. If there\r\nis a problem generating the necessary files when adding new datasets, check the *sciwms_wms.log* file.\r\n\r\n###Caveats:\r\n\r\nLook at https://github.com/acrosby/sci-wms/issues?state=open for a list of known issues and problems.\r\n\r\n###Use:\r\n\r\nThis wms server is based on a model that has a separate GetCapabilities endpoint and base wms end point\r\nfor each dataset added to the server. The datasets are distinguisghed internally by unique dataset id's\r\nprovided by the administrator. These id's are also used used in the base wms url as follows.\r\n\r\n    http://server:port/wms/dataset_id/?REQUEST=GetCapabilities\r\n\r\nThere is no server-wide GetCapabilities document, but we may work on getting one installed in the future.\r\n\r\n##Description of Styles Parameter:\r\n\r\nSTYLES=position1_position2_position3_position4_position5_position6_position7\r\n\r\n###Position 1\r\nThis is the style of image to return.\r\nFor node variables the options are: pcolor, facets, contours, filledcontours, (vectors or barbs if specifying two variables like LAYERS=u,v)\r\n\r\nFor cell variables the options are: pcolor, facets, contours, filledcontours, (vectors or barbs if specifying two variables like LAYERS=u,v)\r\n\r\n###Position 2\r\nThis is the type of processing to do if the request has a time range specified instead of one time. (Probably won’t be needed for this project, but) The options are either: average or maximum\r\n\r\n###Position 3\r\nThis is the colormap to be used. Case-sensitive match to the matplotlib default colormaps. Possible values can be found here: http://www.scipy.org/Cookbook/Matplotlib/Show_colormaps\r\n\r\nTo use colormaps that contain an underscore ( “_” ) substitute the underscore for a hyphen ( “-”) in the styles parameter.\r\n\r\n###Position 4\r\nFor the color scaling, this value is the lower limit or “cmin”, should be entered as an integer or decimal number. If either cmin or cmax are listed as None then the colormap will autoscale to the available data.\r\n\r\n###Position 5\r\nFor color scaling, this value is the upper limit, or “cmax”, should be entered as an integer or decimal number. If either cmin or cmax are listed as None then the colormap will autoscale to the available data.\r\n\r\n###Position 6\r\nThis value specifies whether the variable input in LAYERS parameter is in the middle of an unstructured cell or if it is on the node/vertex. Allowable values in this position are either: cell or node\r\n\r\n###Position 7\r\nThis is a case-sensitive boolean to say whether or not the absolute value (magnitude) or the actual value should be taken if only one variable is specified in LAYERS=\r\n\r\nFor instance LAYERS=u will return positive and negative values if the value in Position 7 is set to False, but if it set to True, the magnitude of u will be returned.\r\n\r\nAllowable values: True or False\r\n(in the case of vectors, True = autoscaling of vectors, False means no autoscaling of vectors with default scale) If there is a number in this position, the number is taken as the scale. Start with 2 and adjust from there.\r\n\r\n"}